[
  
    {
      "title"    : "html_#13 About CSS [7]",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/html/2021/07/03/html_13.html",
      "date"     : "2021-07-03 00:00:00 +0000",
      "content"  : "CSS [7] div의 hidden  visibility를 hidden으로 준 경우         1    2    3&lt;head&gt;    &lt;style&gt;          .box{              width: 100px;              height: 100px;              background-color: red;              border: 1px solid black;          }          #box2{              visibility: hidden;          }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=\"box\" id=\"box1\"&gt;1&lt;/div&gt;    &lt;div class=\"box\" id=\"box2\"&gt;2&lt;/div&gt;    &lt;div class=\"box\" id=\"box3\"&gt;3&lt;/div&gt;&lt;/body&gt;  display를 none으로 준 경우                                   &lt;/body&gt;              ```html                                  &lt;/body&gt;```"
    } ,
  
    {
      "title"    : "html_#11 About CSS [5]",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/html/2021/06/29/html_11.html",
      "date"     : "2021-06-29 00:00:00 +0000",
      "content"  : "CSS [5] ul, li 및 #을 이용한 문단 바로가기          css 예제        목차            문단1        문단2        문단3        문단4        문단5        문단6            문단1    &nbsp;국가안전보장에 관련되는 대외정책·군사정책과 국내정책의 수립에 관하여 국무회의의 심의에 앞서 대통령의 자문에 응하기 위하여 국가안전보장회의를 둔다.    문단2    &nbsp;법원은 최고법원인 대법원과 각급법원으로 조직된다. 모든 국민은 학문과 예술의 자유를 가진다.    문단3    &nbsp;국가는 모성의 보호를 위하여 노력하여야 한다. 군인 또는 군무원이 아닌 국민은 대한민국의 영역안에서는 중대한 군사상 기밀·군용물 등에 관한 죄중 법률이 정한 경우와 비상계엄이 선포된 경우를 제외하고는 군사법원의 재판을 받지 아니한다.    문단4    &nbsp;국가의 세입·세출의 결산, 국가 및 법률이 정한 단체의 회계검사와 행정기관 및 공무원의 직무에 관한 감찰을 하기 위하여 대통령 소속하에 감사원을 둔다.    문단5    &nbsp;대통령으로 선거될 수 있는 자는 국회의원의 피선거권이 있고 선거일 현재 40세에 달하여야 한다.    문단6    &nbsp;평화통일정책의 수립에 관한 대통령의 자문에 응하기 위하여 민주평화통일자문회의를 둘 수 있다.    저자&nbsp;aaaaa&lt;head&gt;      &lt;style&gt;      #title{              color: blue;              font-size: 20px;              text-align: center;          }          .title2{              color: green;              font-size: 15px;              font-style: italic;              font-weight: bold;          }          a{              text-decoration: none;          }          #author{              font-family: 고딕체;              text-transform: capitalize;              font-variant: small-caps;          }      &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;p id=\"title\"&gt;css 예제&lt;/p&gt;    &lt;br&gt;    목차    &lt;ul&gt;        &lt;li&gt;&lt;a href=\"#1\"&gt;문단1&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href=\"#2\"&gt;문단2&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href=\"#3\"&gt;문단3&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href=\"#4\"&gt;문단4&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href=\"#5\"&gt;문단5&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href=\"#6\"&gt;문단6&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;    &lt;br&gt;    &lt;p class=\"title2\"&gt;문단1&lt;/p&gt;    &lt;p id=\"1\"&gt;&amp;nbsp;국가안전보장에 관련되는 대외정책·군사정책과 국내정책의 수립에 관하여 국무회의의 심의에 앞서 대통령의 자문에 응하기 위하여 국가안전보장회의를 둔다.&lt;/p&gt;    &lt;p class=\"title2\"&gt;문단2&lt;/p&gt;    &lt;p id=\"2\"&gt;&amp;nbsp;법원은 최고법원인 대법원과 각급법원으로 조직된다. 모든 국민은 학문과 예술의 자유를 가진다.&lt;/p&gt;    &lt;p class=\"title2\"&gt;문단3&lt;/p&gt;    &lt;p id=\"3\"&gt;&amp;nbsp;국가는 모성의 보호를 위하여 노력하여야 한다. 군인 또는 군무원이 아닌 국민은 대한민국의 영역안에서는 중대한 군사상 기밀·군용물 등에 관한 죄중 법률이 정한 경우와 비상계엄이 선포된 경우를 제외하고는 군사법원의 재판을 받지 아니한다.&lt;/p&gt;    &lt;p class=\"title2\"&gt;문단4&lt;/p&gt;    &lt;p id=\"4\"&gt;&amp;nbsp;국가의 세입·세출의 결산, 국가 및 법률이 정한 단체의 회계검사와 행정기관 및 공무원의 직무에 관한 감찰을 하기 위하여 대통령 소속하에 감사원을 둔다.&lt;/p&gt;    &lt;p class=\"title2\"&gt;문단5&lt;/p&gt;    &lt;p id=\"5\"&gt;&amp;nbsp;대통령으로 선거될 수 있는 자는 국회의원의 피선거권이 있고 선거일 현재 40세에 달하여야 한다.&lt;/p&gt;    &lt;p class=\"title2\"&gt;문단6&lt;/p&gt;    &lt;p id=\"6\"&gt;&amp;nbsp;평화통일정책의 수립에 관한 대통령의 자문에 응하기 위하여 민주평화통일자문회의를 둘 수 있다.&lt;/p&gt;    &lt;span-inline id=\"author\"&gt;저자&amp;nbsp;aa&lt;/span-inline&gt;aaa&lt;/body&gt;"
    } ,
  
    {
      "title"    : "html_#10 About CSS [4]",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/html/2021/06/28/html_10.html",
      "date"     : "2021-06-28 00:00:00 +0000",
      "content"  : "CSS [4] CSS를 이용한 div 태그box 자체를 가운데로 보내고 싶다면 마진을 이용   블록 태그일 경우 마진을 이용해서 가운데로 옮길 수 있다.   마진의 왼쪽, 오른쪽으로 auto로 설정하면 된다.                                 하이&lt;head&gt;    &lt;style&gt;        *,html,body{            padding: 0;            margin: 0;        }        .box{            width: 200px;            height: 200px;            background-color: greenyellow;            border-width: 1px;            border-style: solid;            border-color: black;            /* margin-left: auto;            margin-right: auto; */            margin: 0 auto; /*마진으로 통한 가운데 정렬*/        }        .top{            width: 200px;            height: 100px;            background-color: red;        }        .bottom{            width: 200px;            height: 100px;            background-color: blue;        }        .box2{            width: 100px;            height: 100px;            background-color: chartreuse;            padding-top: 50px;            padding-left: 50px;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=\"box\"&gt;        &lt;div class=\"top\"&gt;&lt;/div&gt;        &lt;div class=\"bottom\"&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div class=\"box2\"&gt;div&lt;/div&gt;&lt;/body&gt;                m: 10p: 0                        m: 5 25p: 0                        m: 0p: 10 30 5                        m: 10p: 10 20                m: 10 30 0 50p: 30 0    &lt;head&gt;    &lt;style&gt;       .box-container{           display: inline-block;           background-color: #d2f4ff;           border: 2px solid #09c;           margin: 5px 15px;       }       .box-container div{           width: 120px;           height: 80px;           background-color: #fde6ff;           border: 2px solid #90C;           font-size: 15px;       }       #box1{            margin: 10px; padding: 0;       }       #box2{            margin: 5px 25px; padding: 0;        }       #box3{            margin: 0; padding: 10px 30px 5px;        }       #box4{            margin: 10px; padding: 10px 20px;        }       #box5{            margin: 10px 30px 0 50px; padding: 30px 0            }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=\"box-container\"&gt;        &lt;div id=\"box1\"&gt;m: 10&lt;br&gt;p: 0    &lt;/div&gt;    &lt;/div&gt;        &lt;div class=\"box-container\"&gt;        &lt;div id=\"box2\"&gt;m: 5 25&lt;br&gt;p: 0    &lt;/div&gt;    &lt;/div&gt;        &lt;div class=\"box-container\"&gt;        &lt;div id=\"box3\"&gt;m: 0&lt;br&gt;p: 10 30 5    &lt;/div&gt;    &lt;/div&gt;        &lt;div class=\"box-container\"&gt;        &lt;div id=\"box4\"&gt;m: 10&lt;br&gt;p: 10 20    &lt;/div&gt;    &lt;/div&gt;    &lt;div class=\"box-container\"&gt;    &lt;div id=\"box5\"&gt;m: 10 30 0 50&lt;br&gt;p: 30 0&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;        &lt;head&gt;    &lt;style&gt;       #box2-1 {               width: 100%;               height: 100%;               border: 1px solid black;               background-image: url(\"1.jpg.png\");               background-repeat: no-repeat;               background-position: top;               background-size: contain;               /* cover, contain의 차이 =&gt; cover는 배경이 들어갈 객체 기준, contain은 그림이 기준*/        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=\"box2-1\"&gt;&lt;/div&gt;&lt;/body&gt;"
    } ,
  
    {
      "title"    : "html_#9 About CSS [3]",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/html/2021/06/26/html_09.html",
      "date"     : "2021-06-26 00:00:00 +0000",
      "content"  : "CSS [3] 빈 태그의css에서는 반드시 숫자를 입력할 경우 단위가 필수 기본 단위는 px(픽셀) css는 무조건 태그 기준으로 한다. 그런데 보통의 태그들은 다 자기만의 의미가 있고, 속성이 있다. 그래서 의미없이 묶어줄 수 있는 빈 태그가 필요하다.   블록 태그 : div / 모든 블록 태그는 크기 설정이 가능 / 한 줄 차지   인라인 태그 : span / 모든 인라인 태그는 크기 설정이 불가능 / 바로 옆에 붙는다   특이한 케이스 : inline-block 타입의 태그 - 가로로 바로 옆에 붙으면서 크기 설정 가능                 버튼태그 &lt;head&gt;    &lt;style&gt;        div{            width: 100px;            height: 100px;            background-color: green;        }        button{            width: 200px;            height: 200px;        }        /* input[type=button]{            width: 100px;            height: 100px;            background-color: greenyellow;        }*/    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;&lt;/div&gt;    &lt;input type=\"button\" value=\"인풋태크\" style=\"width: 150px; height: 80px; background-color: #d2f4ff; border: 2px solid #09c;\"&gt; &lt;!--아무런 기능이 없다--&gt;    &lt;button&gt;버튼태그&lt;/button&gt; &lt;!--input type=\"submit\"과 동일--&gt;&lt;/body&gt;"
    } ,
  
    {
      "title"    : "html_#8 About CSS [2]",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/html/2021/06/24/html_08.html",
      "date"     : "2021-06-24 00:00:00 +0000",
      "content"  : "CSS [2] table에서 css                            번호            제목            글쓴이                            1            노인과 바다            헤밍웨이                            2            오만과 편견            제인 오스틴                            3            개미            베르나르 베르베르                            4            소년이 온다            한강            &lt;head&gt;    &lt;style&gt;        td{            border-width: 1px;            border-color: black;            border-style: solid;        }        td:nth-child(2n+1){ /* 2n=&gt;짝수줄, 2n+1=&gt;홀수줄, n=&gt;전체, 1 2=&gt;td의 첫번째 두번째*/            color: red;        }        td:last-child{            color: red;        }        td:first-child{            color: blue;        }        td:hover{ /*마우스를 올렸을 때*/            background-color: grey;        }        tr:hover{            background-color: grey;        }        table{            margin-left: auto;            margin-right: auto;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;table&gt;        &lt;tr&gt;            &lt;td&gt;번호&lt;/td&gt;            &lt;td&gt;제목&lt;/td&gt;            &lt;td&gt;글쓴이&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;1&lt;/td&gt;            &lt;td&gt;노인과 바다&lt;/td&gt;            &lt;td&gt;헤밍웨이&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;2&lt;/td&gt;            &lt;td&gt;오만과 편견&lt;/td&gt;            &lt;td&gt;제인 오스틴&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;3&lt;/td&gt;            &lt;td&gt;개미&lt;/td&gt;            &lt;td&gt;베르나르 베르베르&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;4&lt;/td&gt;            &lt;td&gt;소년이 온다&lt;/td&gt;            &lt;td&gt;한강&lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;&lt;/body&gt;"
    } ,
  
    {
      "title"    : "html_#7 About CSS [1]",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/html/2021/06/23/html_07.html",
      "date"     : "2021-06-23 00:00:00 +0000",
      "content"  : "CSS [1] 선택자css는 이 사이트 전반에 대한 설정이다.그런 이유로 head에 작성하고 작성 태그는 style이다  태그 선택자 : 태그 이름을 쓴다 ex) p   전체 선택자 : 전체를 의미한다. ex) *   클래스 선택자 : 클래스를 의미한다 / 중복 클래스 가능 ex) .클래스명   아이디 선택자 : 아이디를 의미한다 / 중복 아이디 불가(다만 써도 에러는 없음) ex) #아이디명   속성 선택자 : 속성을 써준다 ex) input[type=text]   가상 선택자 : 눈에 보이지 않는 선택자(특정한 상황에서) ex) a:active   그룹 선택자 : 여러 개 태그 또는 클래스, 아이디를 동시에 같은 속성으로 ex) p, a, .pink   (css2.html)   자손 결합 선택자 - 띄어쓰기 / 어디 밑에 있는 태그 ex) ul li   직계 자손 결합 선택자 - &gt;(꺽새) / 어디 바로 밑에 있는 태그 ex) ul&gt;li   일반 형제 선택자 - 같은 라인의 있는 모든 애들 ex) .title ~ li   인접 형제 선택자 - 같은 라인의 바로 옆 그 녀석 ex) .title + li &lt;head&gt;    &lt;style&gt;        p{ /*여기서 p는 태그의 이름이다. 이것을 태그 선택자라고 한다*/            background-color: pink;        }        input{            background-color: orchid;        }        hr{            height: 10px;            background-color: mediumorchid;        }        *{            color: midnightblue;        }        .pink{            background-color: yellow;        }        #id{            background-color: purple;        }        input[type=text]{            background-color: fuchsia;        }         input[type=button]{            background-color: forestgreen;        }        input[type=password]{            background-color: gold;        }        a{            color: deeppink;        }        a:active{            color: lightskyblue;        }        a:visited{            color: saddlebrown;        }        input[type=text], input[type=button]{            color: slateblue;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;input&gt;    &lt;a href=\"http://naver.com\"&gt;네이버&lt;/a&gt;    &lt;hr&gt;    &lt;input type=\"text\"&gt;    &lt;input type=\"button\" value=\"버튼\"&gt;    &lt;input type=\"password\"&gt;    안녕    &lt;p class=\"pink\"&gt;        이것은 패러그래프    &lt;/p&gt;    &lt;hr&gt;    &lt;p class=\"pink\"&gt;        이것은 패러그래프    &lt;/p&gt;    &lt;hr&gt;    &lt;p id=\"bora\"&gt;        이것은 패러그래프    &lt;/p&gt;    &lt;hr&gt;    &lt;p id=\"bora\"&gt;        가능은 하지만 id 중복은 쓰지 않기를 권함. 중복해야 한다면 클래스로!    &lt;/p&gt;&lt;/body&gt;"
    } ,
  
    {
      "title"    : "html_#6 About HTML tag[5]",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/html/2021/06/21/html_06.html",
      "date"     : "2021-06-21 00:00:00 +0000",
      "content"  : "HTML 태그 [5] select        &lt;optgroup label=\"남자신발\"&gt;            255mm            260mm            265mm            270mm        &lt;/optgroup&gt;    &lt;optgroup label=\"여자신발\"&gt;        &lt;option value=\"5\"&gt;230mm&lt;/option&gt;        &lt;option value=\"6\"&gt;235mm&lt;/option&gt;        &lt;option value=\"7\"&gt;240mm&lt;/option&gt;        &lt;option value=\"8\"&gt;245mm&lt;/option&gt;    &lt;/optgroup&gt; &lt;/select&gt;&lt;select name=\"sel\"&gt;        &lt;optgroup label=\"남자신발\"&gt;            &lt;option value=\"1\"&gt;255mm&lt;/option&gt;            &lt;option value=\"2\"&gt;260mm&lt;/option&gt;            &lt;option value=\"3\"&gt;265mm&lt;/option&gt;            &lt;option value=\"4\"&gt;270mm&lt;/option&gt;        &lt;/optgroup&gt;                &lt;optgroup label=\"여자신발\"&gt;            &lt;option value=\"5\"&gt;230mm&lt;/option&gt;            &lt;option value=\"6\"&gt;235mm&lt;/option&gt;            &lt;option value=\"7\"&gt;240mm&lt;/option&gt;            &lt;option value=\"8\"&gt;245mm&lt;/option&gt;        &lt;/optgroup&gt;&lt;/select&gt;메타 태그5초 뒤 해당 사이트로 이동 &lt;meta http-equiv=\"refresh\" content=\"5;url=http://www.naver.com\"&gt;  body가 아닌 head에 쓴다. 설정에 대한 태그   닫는 태그가 없다.   주로 사이트에 대한 설명들을 작성한다.   keywords : 검색에 사용됨. 지금은 사용 X   description : 사이트에 대한 설명   author : 만든 사람   generator : 만든 툴 -&gt; Visual Studio Code   application-name : 이 웹 프로그램의 이름아이프레임&lt;iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/lf-q7F6S8Zw\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;    &lt;/iframe&gt; &lt;iframe src=\"ex14.html\" width=\"300\" height=\"300\"&gt;&lt;/iframe&gt;아이프레임은 웹 조각을 원하는 곳에 붙여넣을 때 사용. 주 사용은 유튜브에서 사용하고 있고 보통은 많이 사용되지는 않는다. 소스는 다 src로 가져온다. "
    } ,
  
    {
      "title"    : "html_#14 About CSS [8]",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/html/2021/06/20/html_14.html",
      "date"     : "2021-06-20 00:00:00 +0000",
      "content"  : "CSS [8] ul과 li로 배너 만들기                              메일            카페            블로그            지식iN            쇼핑            &lt;head&gt;      &lt;style&gt;            #wrap{                border: 1px solid black;            }            #ulul li{                display: inline-block; /* 가로 배치 */                border: 1px solid black;                margin-left: 10px;                padding: 0 5px;                list-style: none; /* li 앞에 점 없애기 */            }      &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=\"wrap\"&gt;        &lt;ul id=\"ulul\"&gt;            &lt;li&gt;메일&lt;/li&gt;            &lt;li&gt;카페&lt;/li&gt;            &lt;li&gt;블로그&lt;/li&gt;            &lt;li&gt;지식iN&lt;/li&gt;            &lt;li&gt;쇼핑&lt;/li&gt;        &lt;/ul&gt;    &lt;/div&gt;&lt;/body&gt;li의 list-style                  메뉴1        메뉴2        메뉴3        메뉴4         id=\"lili\"메뉴5                    list-style 종류            - disk : 검은 원            - circle : 원            - square : 사각형            - decimal : 숫자(10진수)            - lower-alpha : 영어 소문자            - upper-alpha : 영어 대문자            - upper-roman : 로마 대문자            - armenian : 아르메니아 숫자            - georgian : 조지왕조 숫자            - decimal-leading-zero : 앞에 0이 붙는 숫자            - lower-greek : 그리스 소문자            - lower-latin : 라틴 소문자            - upper-latin : 라틴 대문자            - chk-ideographic : 한자 숫자            - hebrew : 히브리 수            - hiragana : 히라가나 수            - hiragana-iroha : 히라가나 이로하 수            - katakana : 카타카나            - katakana-iroha : 카타카나 이로하 수    &lt;/head&gt;&lt;body&gt;    &lt;ul id=\"ululul\"&gt;        &lt;li id=\"lili\"&gt;메뉴1&lt;/li&gt;        &lt;li id=\"lili\"&gt;메뉴2&lt;/li&gt;        &lt;li id=\"lili\"&gt;메뉴3&lt;/li&gt;        &lt;li id=\"lili\"&gt;메뉴4&lt;/li&gt;        &lt;li&gt; id=\"lili\"메뉴5&lt;/li&gt;    &lt;/ul&gt;    &lt;br&gt;    &lt;pre&gt;        list-style 종류            - disk : 검은 원            - circle : 원            - square : 사각형            - decimal : 숫자(10진수)            - lower-alpha : 영어 소문자            - upper-alpha : 영어 대문자            - upper-roman : 로마 대문자            - armenian : 아르메니아 숫자            - georgian : 조지왕조 숫자            - decimal-leading-zero : 앞에 0이 붙는 숫자            - lower-greek : 그리스 소문자            - lower-latin : 라틴 소문자            - upper-latin : 라틴 대문자            - chk-ideographic : 한자 숫자            - hebrew : 히브리 수            - hiragana : 히라가나 수            - hiragana-iroha : 히라가나 이로하 수            - katakana : 카타카나            - katakana-iroha : 카타카나 이로하 수    &lt;/pre&gt;&lt;/body&gt;"
    } ,
  
    {
      "title"    : "html_#12 About CSS [6]",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/html/2021/06/20/html_12.html",
      "date"     : "2021-06-20 00:00:00 +0000",
      "content"  : "CSS [6] border-style의 종류                solid        dotted        dashed        double        groove        ridge        inset        outset&lt;/body&gt;        ```html                solid        dotted        dashed        double        groove        ridge        inset        outset&lt;/body&gt;```"
    } ,
  
    {
      "title"    : "html_#5 About HTML tag[4]",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/html/2021/06/20/html_05.html",
      "date"     : "2021-06-20 00:00:00 +0000",
      "content"  : "HTML 태그 [4] input의 종류  버튼 &lt;input type=\"button\" value=\"클릭\"&gt;&lt;input type=\"submit\" value=\"전송\"&gt;submit 버튼은 form 태그 안의 input의 value를 백앤드로 넘겨주기 위해 있는 버튼 반드시 form안에 있어야 하며, form안에 있는 모든 input은 name을 가져야 한다. name이 자바에서 마치 변수와 같으며, 변수 값은 value에 담는다. 데이터의 type은 문자열이다. 추가적으로,&lt;input type=\"text\" name=\"id\"&gt; &lt;= 이렇게 작성했을 경우String id = null; &lt;= 이것과 같은 말이 된다. 문자 입력을 할 수 있는 input 이므로 입력된 글씨가 value가 된다.   글씨를 눌러도 체크가 가능하게끔사과&lt;input type=\"checkbox\" id=\"fruit\"&gt;&lt;label for=\"fruit\"&gt;사과&lt;/label&gt;   색깔 선택창 &lt;input type=\"color\"&gt;   날짜 선택창 &lt;input type=\"date\"&gt;&lt;input type=\"datetime\"&gt;&lt;input type=\"datetime-local\" name=\"\" id=\"\"&gt;  파일 선택창     &lt;input type=\"file\"&gt;            히든 : 회원 번호 같이 숨겨서 값을 넘겨줄 때 사용 hidden    &lt;input type=\"hidden\"&gt;hidden            이미지     &lt;input type=\"image\" alt=\"이미지\" src=\"https://github.com/kwonyezy/kwonyezy.github.io/blob/master/_posts/pictures/skyimg.jpg?raw=true---\"&gt;            년, 월만 선택가능     &lt;input type=\"month\"&gt;            수량 선택과 같은 숫자창    &lt;input type=\"number\"&gt;            비밀번호의 * 표시를 볼 수 있게끔 하는 창    &lt;input type=\"password\"&gt;            라디오 버튼창 (name속성으로 할 경우 중복 선택 불가능) 감자고구마    &lt;input type=\"radio\" name=\"vag\"&gt;감자&lt;br&gt;&lt;input type=\"radio\" name=\"vag\"&gt;고구마            슬라이더 창    &lt;input type=\"range\"&gt;            서치창 전체 지우기 기능    &lt;input type=\"search\"&gt;            밑 두가지 지원안되므로 기능이 따로 없음    &lt;input type=\"tel\"&gt;            &lt;input type=\"url\"&gt;      "
    } ,
  
    {
      "title"    : "html_#4 About HTML tag[3]",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/html/2021/06/19/html_04.html",
      "date"     : "2021-06-19 00:00:00 +0000",
      "content"  : "HTML 태그 [3] Tabletable - 표tr - table rowtd - table data화면에 출력될 모든 내용은 td에만th는 가운데 정렬에 진하게&lt;table border=\"1\"&gt;  &lt;tr&gt;      &lt;th&gt;글번호&lt;/th&gt;      &lt;th&gt;글제목&lt;/th&gt;      &lt;th&gt;글쓴이&lt;/th&gt;  &lt;/tr&gt;    &lt;tr align=\"center\"&gt;      &lt;th&gt;글번호&lt;/th&gt;      &lt;th&gt;글제목&lt;/th&gt;      &lt;th&gt;글쓴이&lt;/th&gt;  &lt;/tr&gt;    &lt;tr bgcolor=\"red\"&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;노인과 바다&lt;/td&gt;      &lt;td&gt;헤밍웨이&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;      &lt;td bgcolor=\"blue\"&gt;2&lt;/td&gt;      &lt;td&gt;오만과 편견&lt;/td&gt;      &lt;td&gt;제인 오스턴&lt;/td&gt;  &lt;/tr&gt;&lt;/table&gt;예제1  rowspan : 세로로 합치기        색깔      하얀색            노란색            연두색  &lt;table border=\"1\"&gt;  &lt;tr&gt;      &lt;td rowspan=\"3\"&gt;색깔&lt;/td&gt;      &lt;td&gt;하얀색&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;노란색&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;연두색&lt;/td&gt;  &lt;/tr&gt;&lt;/table&gt;예제2  colspan : 가로로 합치기        색깔            하얀색      노란색      연두색  &lt;table border=\"1\"&gt;  &lt;tr&gt;      &lt;td colspan=\"3\"&gt;색깔&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;하얀색&lt;/td&gt;      &lt;td&gt;노란색&lt;/td&gt;      &lt;td&gt;연두색&lt;/td&gt;  &lt;/tr&gt;&lt;/table&gt;"
    } ,
  
    {
      "title"    : "html_#3 ABOUT HTML tag[2]",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/html/2021/06/19/html_03.html",
      "date"     : "2021-06-19 00:00:00 +0000",
      "content"  : "HTML 태그 [2]목록 관련&lt;ul&gt;: 순서 없는 목록(unordered list)을 표시한다.    속성 : type = “disk”, type = “cicle”, type = “square”&lt;ol&gt;: 순서 있는 목록(ordered list)을 표시한다. 참고로 이 태그는 단지 비주얼적인 태그라는 이유로 HTML4에서 비권장 태그로 들어갔다가 HTML5에서 &lt;ul&gt; 태그와 구별해서 사용할 필요성이 제기되면서 표준 태그로 재지정되었다.    속성 : type = “1”, type = “I”, type = “i”, type = “A”, type = “a”&lt;li&gt;: 목록에서 각 항목(list item)은 &lt;li&gt;와 &lt;/li&gt;사이에 넣는다.  &lt;ol&gt;이나 &lt;ul&gt; 사이에 들어가야 하며 실체 화면에 출력되는 부분이다.&lt;ul type=\"disk\"&gt;\t&lt;li&gt;이것&lt;/li&gt;\t&lt;li&gt;목록&lt;/li&gt;\t&lt;li&gt;내용&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;\t&lt;li type=\"disk\"&gt;이것&lt;/li&gt;\t&lt;li type=\"circle\"&gt;목록&lt;/li&gt;\t&lt;li&gt;내용&lt;/li&gt;&lt;/ul&gt;&lt;ol type=\"1\"&gt;\t&lt;li&gt;이것&lt;/li&gt;\t&lt;li&gt;목록&lt;/li&gt;\t&lt;li&gt;내용&lt;/li&gt;&lt;/ol&gt;&lt;ol&gt;\t&lt;li type=\"1\"&gt;이것&lt;/li&gt;\t&lt;li type=\"A\"&gt;목록&lt;/li&gt;\t&lt;li&gt;내용&lt;/li&gt;&lt;/ol&gt;링크 / 이미지 관련 : 하이퍼링크를 생성하는 태그이다. href 속성을 써서 &lt;a href=\"링크할 페이지\"&gt;내용&lt;/a&gt;와 같이 작성한다.    ※ 페이지 내에서의 이동도 가능     id 속성을 설정해 준다.    으로 링크를 걸어 주면 id 가 있는 위치로 페이지 내에서 이동시켜준다.    속성 : target=“옵션”    _self : 현재 보고있는 창이 바뀝니다.    _blank : 새 창으로 열립니다.    _parent : 여러 프레임을 사용 할 경우, 한 단계 상위 프레임에서 열립니다.    _top : 여러 프레임을 사용 할 경우, 가장 상위 프레임에서 열립니다.    title=“내용” : 링크에 대한 설명이 나온다.    : 페이지에 이미지를 추가하는 태그이다.  형식 : src=”이미지 파일 이름” : 삽입될 이미지 파일을 지정함.    alt=”간단한 설명” : 그림에 마우스를 올렸을 때 나올 글씨 ※필수※ 이미지를 화면에 표시하지 않고 사용하는 사용자들을 위하여 이미지에 대한 간단한 설명을 붙이는 것align=”left” , align=”right” : left는 이미지를 왼쪽으로 정렬하면서 만약 텍스트가 있다면 이미지의 오른쪽에 정렬시킨다. right는 이미지를 오른쪽에 정렬하면서 텍스트는 이미지의 왼쪽에 정렬align=”top”, align=”middle”, align=”bottom” : 텍스트의 위치를 이미지의 세로 방향에서 위쪽, 가운데, 아래쪽으로 정렬시킨다.   border=”숫자” : 이미지 경계선의 두께를 설정하는 것이며, 숫자가 커질수록 두꺼워지고 픽셀 단위로 입력한다.    height=”숫자”, width=”숫자” : height는 이미지의 높이, width는 이미지의 너비를 지정하는 것으로 픽셀 단위나 % 단위로 입력 가능하다. 이 속성을 지정하지 않아도 이미지를 표시 하는 데는 지장이 없으나 작은 이미지를 크게 나타내거나 큰 이미지를 작게 나타낼 수 있지만, 원본 이미지의 크기를 조정하는 것은 아니다.hspace=”숫자” : 픽셀 단위로 입력하며 이미지 좌우로 여백을 설정한다vspace=”숫자” : 픽셀 단위로 입력하며 이미지 상하로 여백을 설정한다."
    } ,
  
    {
      "title"    : "html_#2 ABOUT HTML tag[1]",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/html/2021/06/14/html_02.html",
      "date"     : "2021-06-14 00:00:00 +0000",
      "content"  : "HTML 태그 [1]HTML 기본구조요소(Elements) : 제목태그(tag) : 제목속성(attributes) : &lt;P ALIGN='center'&gt;변수(Arguments) : &lt;P ALIGN='center'&gt;&lt;html&gt;\t&lt;head&gt;\t&lt;title&gt; 문서의 제목 &lt;/title&gt;\t&lt;/head&gt;\t&lt;body&gt;\t\t문서의 내용\t&lt;/body&gt;&lt;/html&gt;주석 처리&lt;!-- 내용 --&gt;기본태그&lt;body&gt; : 모든 내용이 작성되는 부분태그의 속성  형식 : &lt;body 속성 = \"속성값\"&gt;     bgcolor = “red” 또는 “16진수 rgb값” : 배경색을 지정    background = “image_file_name.jpg” : 배경 이미지의 경로와 이름    bgsound = “sound.wmv” : 배경음악의 경로와 이름    text = “색상명” 또는 “rgb값” : 글자의 색을 지정    link = “색상명” 또는 “rgb값” : 링크로 설정한 글자의 색을 지정    alink = “색상명” 또는 “rgb값” : 링크를 클릭할 때 변화되는 색을 지정    vlink = “색상명” 또는 “rgb값” : 링크를 방문한 후의 글자색을 지정    topmargin =“정수” : 위쪽여백    rightmargin =“정수” : 오른쪽 여백    bottommargin =“정수” : 밑쪽 여백    leftmargin =“정수” : 왼쪽 여백&lt;body link=\"red\" vlink=\"#00cc00\" alink=\"yellow\" text=\"navy\" bgcolor=\"#ccffff\" background=\"./image/image.jpg\" topmargin=\"10\" leftmargin=\"10\"&gt;자주 가는 사이트 &lt;br /&gt;&lt;a href=\"http://www.naver.com\"&gt;Naver&lt;/a&gt;&lt;a href=\"http://www.nate.com\"&gt;Nate&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;텍스트 관련 태그&lt;h[1-6]&gt;: 제목(heading)을 표시할 때 사용된다. &lt;h1&gt;이 가장 크고 &lt;h6&gt;이 가장 작다. 크기는 브라우저마다 표시하는 방법이 달라 다르게 나타날 수 있다. CSS를 쓰면 크기, 색상, 폰트 등을 변경할 수 있다. &lt;h1&gt;은 한문서 안에 하나만 사용하는 것을 권장한다.&lt;p&gt;: 새 문단(paragraph)을 연다. &lt;/p&gt;로 닫는다. 극초창기에는 후술할 &lt;br&gt; 태그처럼 닫는 태그가 없고 단순히 문단을 구분하는 역할만 했는데 HTML 2.0에서 닫는 태그가 추가되어 문단을 묶어주는 역할을 하게 되었다. 이 태그를 쓸 경우 기본적으로 문단 하단에 약 1줄 가량의 빈 공간이 생기기 때문에 &lt;br&gt;을 선호하는 경우가 많은데, 문단이라면 &lt;p&gt; 태그로 묶어주는 것이 올바른 사용법이다. 빈 공간은 CSS를 지정해서 없앨 수 있다.&lt;b&gt;: 두껍게(bold) 효과를 준다. 그러나 HTML 4.01부터 비권장 태그로 들어갔는데, 이 이유는 이 태그가 비주얼적인 효과를 주기 위한 태그라 비권장으로 지정된 것. 강조의 의미를 줄 때는 &lt;strong&gt; 태그로 대체하고 그 이외에는 CSS의 font-weight: bold; 속성으로 쓸 것을 권장하고 있다. 하지만 HTML5에서 &lt;strong&gt;보다 약한 의미의 강조로 다시 복귀했다.&lt;i&gt;: 텍스트를 기울임꼴(italic)로 표시한다. 기술 용어, 외국어, 일반적으로 기울임꼴로 사용되는 용어 등을 강조한다.&lt;strong&gt;: 포함된 텍스트를 강하게 강조할 때 사용한다.&lt;em&gt;: &lt;strong&gt;보다 약한 강조를 나타낼 때 사용한다.&lt;ins&gt;: 문서에 삽입(insert)된 텍스트, 즉 밑줄을 표시한다.&lt;del&gt;: 문서에서 삭제(delete)된 텍스트, 즉 취소선을 표시한다.&lt;s&gt;: 취소선을 표시한다. HTML 4.01에서 비권장 태그로 되었다가 HTML5에서 &lt;del&gt;보다는 약한 삭제의 의미로 변경되면서 존치되었다.&lt;u&gt;: 밑줄을 표시한다. HTML 4.01에서 비권장 태그로 되었다가 HTML5에서 &lt;ins&gt;와는 구별되는 의미로 변경되면서 존치되었다. 주로 철자 오류를 지적하는 데 쓴다.&lt;sup&gt;: 텍스트를 위첨자(superscript)로 표시한다.&lt;sub&gt;: 텍스트를 아래첨자(subscript)로 표시한다.&lt;small&gt;: 텍스트를 조금 더 작게 표시한다. &lt;big&gt; 태그가 HTML5 규격에서 제외된 것과는 달리 &lt;small&gt; 태그는 존치되어 있다. 주로 저작권 정보나 주석을 조그맣게 다는 데 쓴다.&lt;br&gt;: 문단 내 줄바꿈(line break). 강제개행을 하는 태그이다. 문단의 흐름을 해치기 때문에 권장되는 태그는 아니다.&lt;abbr&gt;: 약어를 이 태그로 묶어서 무엇의 약어인지 설명하기 위한 태그이다. &lt;abbr title=\"약어에 대한 설명\"&gt;약어&lt;/abbr&gt; 식으로 써서 마우스 커서를 대면 설명이 떠서 읽을 수 있게 한다.(속성 : title=내용) 원래는특별한 시각적 효과를 부여하려면 CSS를 사용해야 했지만 구글 크롬과 파이어폭스에서는 언제부터인가 CSS를 지정하지 않더라도 자동으로 점선 밑줄이 생기게 되었다.&lt;wbr&gt;: 글이 길어질 때 띄어쓰기가 없더라도 이 태그가 쓰인 부분에서 자동개행이 이루어진다. 예를 들어, Java&lt;wbr&gt;Programming이라고 쓰면 개행되지 않을 때는 'JavaProgramming'으로 붙어서 나오지만 자동개행시 &lt;wbr&gt; 태그 앞뒤로 위치한 'Java'와 'Programming'이 서로 분리될 수 있다. 원래는 개행을 방지하는 비표준 태그 &lt;nobr&gt; 안애서 &lt;br&gt; 태그와 같은 기능을 하는 태그였으나 HTML5에서 표준으로 채택되면서 기능이 변경된 것. 코더들 사이에서 이 태그와 SHY 중 무엇을 써야 할 지 의견이 분분하다.    다만 한글은 글자 단위로 개행이 되기 때문에 한글에다가 이 태그를 쓸 필요성은 거의 없다.&lt;blockquote&gt;: 인용구를 기술하는 태그이다. 기본적으로 들여쓰기가 되어 있는데 CSS로 없앨 수 있다.&lt;q&gt;: &lt;blockquote&gt;의 인라인 버전.&lt;dfn&gt;: 후술할 &lt;dl&gt;의 인라인 버전.&lt;pre&gt;: 서식 있는(Preformatted) 텍스트를 넣기 위한 태그이다. 이 태그 안에는 &lt;br&gt; 태그 없이 개행하더라도 개행을 인식하고 공백 문자가 두 개 이상 연속으로 있어도 하나로 취급하지 않고 그대로 표시된다. 또한, 일반적으로 이 태그 안에 들어간 텍스트는 고정폭 글꼴로 표시된다. 이 태그 안에 다른 태그를 넣으면 경우에 따라 의도치 않게 표시될 수도 있으므로 가급적이면 다른 태그를 넣지 않는 것이 좋다.&lt;var&gt;, &lt;samp&gt;, &lt;kbd&gt;, &lt;code&gt;: 변수 등 프로그래밍 언어와의 연계를 위한 태그.&lt;ruby&gt;: 후리가나 표기에 쓰이는 기본 태그. 절대 Ruby를 프로그래밍하기 위한 태그가 아니다!  &lt;rp&gt; : 후리가나가 지원되지 않는 환경에서 표기할 텍스트를 지정한다.  &lt;rt&gt; : 후리가나를 쓴다.  &lt;rb&gt; : 합성어 등으로 후리가나가 여러 단어로 이루어지는 경우 등에 후리가나 영역을 지정하는데 쓰인다.    W3C HTML 표준이나 WHATWG HTML Living Standard 표준이 아니다.  &lt;rtc&gt; : 후리가나의 의미적 주석을 넣는다. W3C HTML 표준이나 WHATWG HTML Living Standard 표준이 아니다.    사용법 : &lt;ruby&gt;漢字&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;かんじ&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;&lt;hr&gt;: 가로줄(horizontal rule)을 넣는다. HTML5에서는 주제 분리 요소 기능이 더해졌지만, 시각적으로는 차이가 없다.  형식 : &lt;hr 속성=\"값\"&gt;    color =”값” (값 = 색이름 / SRGB) : 선의 색상    width=”값” (값 = 숫자 또는 %) : 선의 길이    size=”값” (값 = 숫자) : 선의 굵기    noshade (그냥 적어주면된다. 값이 없다.) : 그림자 없는 선 작성    align=“값” (값= left, right, center): 정렬&lt;font&gt; : 글자의 색, 크기, 서체등을 바꿀 수 있다. - HTML5에서 추천되지 않는다.(css로 대체)  형식 : &lt;font 속성=\"값\" 속성=\"값\"...&gt; 내용 &lt;/font&gt;    size= “10진수” : 글자의 크기 지정    color = “red” 또는 “16진수 rgb값” : 글자의 색    face= “서체” : 글자의 서체&lt;font size=\"6\" color=\"red\" face=\"돋움체\"&gt;돋움체&lt;/font&gt;&lt;font size=\"6\" color=\"#0900FF\" face=\"궁서체\"&gt;궁서체&lt;/font&gt;"
    } ,
  
    {
      "title"    : "Test File",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/html/2021/06/08/test_01.html",
      "date"     : "2021-06-08 00:00:00 +0000",
      "content"  : "HTML에 대하여HTML에 대해“Hyper Text Mark-up Language” 의 약자. 웹 페이지의 모습을 기술하기 위한 규약. 프로그래밍 언어가 아니라 마크업 언어다.     웹사이트에서 흔히 볼 수 있는 htm이나 html 확장자가 바로 이 언어로 작성된 문서이다.마크업 언어(markup language)는 태그 등을 이용하여 문서나 데이터의 구조를 명기하는 언어의 한 가지이다.    태그는 원래 텍스트와는 별도로 원고의 교정부호와 주석을 표현하기 위한 것이었으나 용도가 점차 확장되어 문서의 구조를 표현하는 역할을 하게 되었다.    최초 제안자는 CERN의 물리학자 티머시 J. 버너스리이다. URL, HTTP, WWW의 전신인 Enquire 등도 그가 세트로 개발하고 제안했다. TCP/IP 통신규약을 만든 빈턴 G. 서프(Vinton Gray Cerf)와 함께 인터넷의 아버지로 불린다.HTML은 문법 오류에 관대한 편이다. 그래서 닫는 태그를 누락한다든가 태그에 오타가 난다든가 하는 오류가 발생해도 어느 정도는 씹어 먹고 작동할 수 있다. (물론 ‘어느 정도’까지만) &lt;div&gt; 태그 등 중요한 태그에서 오타가 난다면 사이트 레이아웃이 홀랑 깨져 버리기도 한다. 다만 HTML 최상단의 &lt;!DOCTYPE&gt; 선언이 누락될 경우에는 이야기가 많이 달라지는데, 이 경우 브라우저는 해당 HTML 문서를 호환성 모드(Quirks mode)로 해석하여 렌더링 한다.태그HTML을 기술하기 위하여 사용하는 명령어의 집합을 태그(Tag)라고 한다. 태그는 기본적으로 여는 태그와 닫는 태그로 구성되며, 닫는 태그 없이 단독으로 이용하는 태그도 있다. 태그에 주는 다양한 옵션은 모두 여는 태그에 지정하며, 닫는 태그는 태그 효과가 적용되는 범위의 끝을 나타내는 기능만 한다.그런데 태그 종류가 수십 가지가 넘는 데다, 지정 가능한 옵션까지 일일이 열거하면 책 한 권 분량이 된다. 따라서 일반인은 사용빈도가 높은 일부 태그만 암기하고, 나머지는 ‘태그사전(또는 레퍼런스)’이라고 하는 도움말 파일을 참고하는 편이다. 물론 암기 범위는 고급 사용자 내지는 프로페셔널(흔히 웹 퍼블리셔라고 하는사람들)로 갈수록 넓어진다."
    } ,
  
    {
      "title"    : "Java_#13 ABOUT Overriding",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/java/2021/06/08/java_13.html",
      "date"     : "2021-06-08 00:00:00 +0000",
      "content"  : "Java의 오버라이딩객체 지향 프로그래밍 언어에서 오버라이딩은 하위 클래스(자식 클래스)가 상위 클래스(부모 클래스) 의 속성을 물려받아 해당 메소드의 내용을 재구현을 할 수 있는 기능이다. 자식클래스의 메소드가 부모클래스의 메소드와 이름, 파라미터 또는 시그니처, 반환 타입이 같으면 자식클래스의 메소드가 부모클래스의 메소드를 재정의(오버라이딩)한다고 한다.오버라이딩은 Java의 객체지향의 주요 특성중 다형성을 구현하는 방법 중 하나이다. 오버라이딩으로 정의된 메소드중 실행되는 메소드는 호출하는 데 사용되는 객체에 의해 결정된다. 부모 클래스의 객체가 메서드를 호출하는 경우, 부모 클래스의 메소드가 실행되지만 하위 클래스의 객체가 메소드를 호출한다면 자식 클래스의 메소드가 실행된다. 다시 말해, 오버라이딩된 메소드의 호출을 결정하는 것은 참조 변수의 유형이 아니라 참조되는 객체의 타입이다.class Parent {    void show()    {        System.out.println(\"Parent's show()\");    }}class Child extends Parent {    // This method overrides show() of Parent    @Override    void show()    {        System.out.println(\"Child's show()\");    }}class Main {    public static void main(String[] args)    {        Parent obj1 = new Parent();        obj1.show();         Parent obj2 = new Child();        obj2.show();    }}위의 예제는 부모 클래스 class Parent의 객체 ob1과, 부모 클래스를 상속 받은 자식 클래스 class Child의 객체 obj2에서 각각 show 메소드를 호출하는 소스이다.obj1.show();의 경우 부모 클래스 객체에서의 호출이므로 Parent's show()가 호출 되고, obj2.show();의 경우 부모 클래스를 상속 받은 자식 클래스에서 재정의(오버라이딩)된 메소드가 호출되어 Child's show()가 출력된다.실행결과:Parent's show()Child's show()"
    } ,
  
    {
      "title"    : "html_#1 ABOUT HTML",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/html/2021/06/08/html_01.html",
      "date"     : "2021-06-08 00:00:00 +0000",
      "content"  : "HTML에 대하여HTML에 대해“Hyper Text Mark-up Language” 의 약자. 웹 페이지의 모습을 기술하기 위한 규약. 프로그래밍 언어가 아니라 마크업 언어다.     웹사이트에서 흔히 볼 수 있는 htm이나 html 확장자가 바로 이 언어로 작성된 문서이다.마크업 언어(markup language)는 태그 등을 이용하여 문서나 데이터의 구조를 명기하는 언어의 한 가지이다.    태그는 원래 텍스트와는 별도로 원고의 교정부호와 주석을 표현하기 위한 것이었으나 용도가 점차 확장되어 문서의 구조를 표현하는 역할을 하게 되었다.    최초 제안자는 CERN의 물리학자 티머시 J. 버너스리이다. URL, HTTP, WWW의 전신인 Enquire 등도 그가 세트로 개발하고 제안했다. TCP/IP 통신규약을 만든 빈턴 G. 서프(Vinton Gray Cerf)와 함께 인터넷의 아버지로 불린다.HTML은 문법 오류에 관대한 편이다. 그래서 닫는 태그를 누락한다든가 태그에 오타가 난다든가 하는 오류가 발생해도 어느 정도는 씹어 먹고 작동할 수 있다. (물론 ‘어느 정도’까지만) &lt;div&gt; 태그 등 중요한 태그에서 오타가 난다면 사이트 레이아웃이 홀랑 깨져 버리기도 한다. 다만 HTML 최상단의 &lt;!DOCTYPE&gt; 선언이 누락될 경우에는 이야기가 많이 달라지는데, 이 경우 브라우저는 해당 HTML 문서를 호환성 모드(Quirks mode)로 해석하여 렌더링 한다.태그HTML을 기술하기 위하여 사용하는 명령어의 집합을 태그(Tag)라고 한다. 태그는 기본적으로 여는 태그와 닫는 태그로 구성되며, 닫는 태그 없이 단독으로 이용하는 태그도 있다. 태그에 주는 다양한 옵션은 모두 여는 태그에 지정하며, 닫는 태그는 태그 효과가 적용되는 범위의 끝을 나타내는 기능만 한다.그런데 태그 종류가 수십 가지가 넘는 데다, 지정 가능한 옵션까지 일일이 열거하면 책 한 권 분량이 된다. 따라서 일반인은 사용빈도가 높은 일부 태그만 암기하고, 나머지는 ‘태그사전(또는 레퍼런스)’이라고 하는 도움말 파일을 참고하는 편이다. 물론 암기 범위는 고급 사용자 내지는 프로페셔널(흔히 웹 퍼블리셔라고 하는사람들)로 갈수록 넓어진다."
    } ,
  
    {
      "title"    : "Java_#12 ABOUT Inheritance",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/java/2021/06/05/java_12.html",
      "date"     : "2021-06-05 00:00:00 +0000",
      "content"  : "Java의 상속Java에서 상속이란 한 클래스에서 다른 클래스로 속성(변수와 메서드)을 획득하는 개념이다. 일반적으로 부모와 자식 관계라고 표현한다.Java에서 클래스는 다른 클래스의 속성과 메서드를 상속할 수 있습니다. 속성을 상속하는 클래스를 하위 클래스 또는 자식 클래스라고 한다. 속성이 상속되는 클래스를 상위 클래스 또는 부모 클래스라고 한다.기본적인 상속의 형태class​ superclass {    // superclass data variables    // superclass member functions } class​ subclass ​extends​ superclass {    // subclass data variables    // subclass member functions }상속은 extends 키워드를 사용하여 할 수 있고 상위 클래스의 자원을 재 사용하여 하위 클래스에서 사용 할 수 있다.class Base {    public void M1()   {     System.out.println(“ Base Class Method ”);   } } class Derived extends Base {   public void M2()   {     System.out.printIn(“ Derived Class Methods “);   } } class Test {   public static void main(String[] args)   {     Derived d = new Derived(); // creating object     d.M1(); // print Base Class Method     d.M2(); // print Derived Class Method   } } 위의 예제는 상속의 기초 예제이다.    실행 결과는 아래와 같다.Base Class MethodDerived Class Methods상위클래스의 M1() 메서드를 상속받아 바로 사용 할 수 있는 모습이다.    상속을 사용 하는 주요 이유는 코드의 재사용성과 메서드의 재정의이고 이는 객체지향에서 가장 중요한 키워드인 다형성을 의미한다."
    } ,
  
    {
      "title"    : "Java_#11 ABOUT Static",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/java/2021/06/02/java_11.html",
      "date"     : "2021-06-02 00:00:00 +0000",
      "content"  : "Java의 staticstatic 변수, 메서드는 정적 변수, 메서드로 일반 변수나 메서드와는 달리 static 영역(data영역)에 할당된다.    stack 영역에 할당되는 지역변수나 메소드를 포함한 클래스 객체 같은 경우 stack 구조상 해당 메서드가 끝나면 데이터를 반환해야만 하므로 자료를 유지할 수가 없고, 다른 영역에서 해당 자원을 사용할 수가 없다. 그렇기 때문에 여러 영역에서 공용으로 사용해야 하거나 데이터값을 프로그램 동작 중에 계속 유지하고 싶을 경우 static 영역에 변수나 메서드를 선언해주면 된다.class StaticEx{\tstatic int x = 1;\t\tstatic void printEx1(){ //static을 붙이면 main에서 그냥 가져와서 쓸 수 있다\t\tSystem.out.println(x++);\t}\t\tvoid printEx2() {\t\tSystem.out.println(x++);\t}\t\tpublic static void main(String args[]){\t\tSystem.out.println(x++);\t\tprintEx1();\t\tprintEx2(); // 여기서 에러가난다\t}}위의 예제는 정적 메서드 static void printEx1() 와 정적 변수 static int x의 사용 예제이다.     main 문에서 3번의 static 변수 x 의 호출이 이루어지는데 호출 시마다 1씩 증가를 하여 1, 2, 3이 나오길 기대할 수 있다. 하지만 printEx2() 의 경우 에러를 발생시킨다.  printEX1()과의 차이는 정젹 메서드냐 아니냐이다. 앞서 이야기했듯이 정적메서드는 static 영역에, 일반 메서드는 클래스 객체가 new로 생성될 시 메모리에 생성되므로 printEx2()는 현재 new 연산자로 메모리에 로드되질 않았기 때문에 호출할 수가 없는 상태이다.    그에 반해 printEx1() 메서드는 static 영역에 생성되는 정적 메서드이므로 프로그램 실행 시 바로 적재되어 그대로 사용 할 수 있는 것이다.printEx2() 메서드에 주석을 걸고 프로그램을 실행 시켜 보면 1, 2 라는 출력 결과를 확인 할 수가 있다. 변수 static int x 역시 정적 변수로 프로그램 실행 시 부터 끝날 때까지 메모리에 계속 남아있기 때문에 어디서 접근하든 값을 유지하고 수정 할 수 있는 것이다."
    } ,
  
    {
      "title"    : "Java_#10 ABOUT NPP setting",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/java/2021/05/31/java_10.html",
      "date"     : "2021-05-31 00:00:00 +0000",
      "content"  : "Notepad++에 Java 컴파일 환경 설정플러그인 -&gt; Plugins Admin 클릭해당 창에서 NppExec를 찾아서 체크한 뒤 상단의 Install 클릭    (자동 재실행 됨)플러그인 하위 메뉴로 NppExec가 생기며, Execute…를 클릭위 그림처럼 입력 후 Save… 클릭Script name 창에 Compile을 입력하고 Save 클릭똑같은 과정 한번 더 실행    플러그인 -&gt; NppExec -&gt; Execute… 클릭화면 밑의  선택하여 새로운 설정 추가위의 그림처럼 입력 후 Script name은 Run으로 Save플러그인 -&gt; NppExec -&gt; Advanced Options… 클릭상단에 Place to the Macros submenu를 체크하단의 Item name에 Compile이라 작성 후 Associated script에서 Compile 선택선택 후 Add/Modify를 누르면 위의 그림처럼 Place to the Macros submenu에 추가 됨  Run도 똑같은 과정으로 추가설정 -&gt; 단축키 설정… 클릭Main menu에서 위의 1번째 스타일, 2번째 스타일을 찾아서 Clear 클릭    그러면 이미 설정되어 있던 단축키 Ctrl+1, Ctrl+2가 삭제됨Plugin commands 탭에서 위 과정에서 만든 Compile과 Run을 찾아서 각각 위에 그림과 같이 Ctrl에 체크 한 뒤 번호를 각각 1, 2로 설정코드를 작성 후 Ctrl+1을 누르면 컴파일이 되고, Ctrl+2를 누르면 컴파일된 프로그램이 실행된다"
    } ,
  
    {
      "title"    : "Java_#9 ABOUT Constructor",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/java/2021/05/28/java_09.html",
      "date"     : "2021-05-28 00:00:00 +0000",
      "content"  : "Java의 Constructor클래스의 객체를 하나 만들 때 제일처음, 생성자가 실행된다. 보통 클래스 내부의 맴버 변수 값을 초기화하기 위한 목표로 실행되며 생성자는 오버로딩을 통해 여러개의 메소드 형태로 정의 할 수 있다.class Car{\tint gear;   \tString color;   \tCar(){//1\t\tthis(8);\t}\tCar6(int g){//2\t\tthis(g,\"빨강\");\t}\tCar(int g, String c){//3\t\tgear=g;\t\tcolor=c;\t}\tvoid printCar(){\t\tSystem.out.println(gear+\" : \"+color);\t}\tpublic static void main(String args[]){\t\tCar c = new Car();\t\tc.printCar();\t}}위의 예제는 클래스 Car에대한 생성자 예제이다.    생성자의 이름은 반드시 클래스이름과 같아야하고 반환값을 가지지않는다. 또, Car(), Car6(int g), Car(int g, String c) 등 생성자는 오버로딩이 가능하다Car 라는 클래스의 객체 c를 만들면서 시작된다. new 라는 명령으로 프로그램은 heap영역에 class Car 의 새로운 객체영역을 할당하고 그 주소를 변수 c가 참조하게된다. 그리고 new 뒤에 Car() 라는 생성자를 호출하게되는데 생성자 호출시에 매개변수를 전달하지 않았으므로 //1 의 매개변수가 없는 생성자가 호출된다.그 내부는 this(8)을 실행하는데 클래스 내부에서 this는 자기자신을 가리킨다. 결국 this(8)은 Car(8)을 의미하고 //2 의 매개변수를 하나가지는 Car6(int g) 생성자를 호출하게 된다.Car6(int g) 생성자 내부에서 this(g,\"빨강\")로 바로Car(int g, String c)`` 생성자를 호출한다.결국 어느 생성자를 호출하든 Car(int g, String c) 생성자가 최종적으로 호출되고 생성자 호출시에 Car c = new Car()와 같이 매개변수가 하나도없는경우 default값으로  gear에 매개변수 int g 로 들어온 8 이 들어가고, color에 string c로 전달받은 \"빨강\" 이란 문자열이 들어가게된다.Car c = new Car(8,\"빨강\"); 과 같이 생성자를 호출한것과 같은 결과를가진다."
    } ,
  
    {
      "title"    : "Java_#8 ABOUT Overloading",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/java/2021/05/21/java_08.html",
      "date"     : "2021-05-21 00:00:00 +0000",
      "content"  : "Java의 Overloading오버로딩이란 매개변수만 다른 같은 이름의 메서드를 여러개 정의하는 것을 말한다.    매개변수를 필요로하는 메서드를 정의할 때 간혹, 매개변수의 개수가 없더라도, 혹은, 개수가 좀 적더라도 동작시키도록 하고싶은경우에 주로 사용된다.원래 자바 컴파일러는 같은 이름의 메서드를 2개이상 정의하는 것을 허용하지 않는다. 컴파일시 호출된 메서드가 정의된 부분이 2군데라면 어느 메서드를 호출할 지 모르기 때문이다.    하지만 메서드를 호출할때 전달하는 매개변수의 개수가 다르다면 어느 메서드를 호출하는것인지 명확히 구분을 할 수 있기 때문에 컴파일러는 다른 메서드로 인식할 수 있고, 이를 처리할 수 있게된다.때문에, 반환형을 다르게 정의한다고 오버로딩이 가능하지 않는다. return 값이 다르다한들 메서드가 호출되는 시점에서 이미 컴파일러는 매개변수가 같은 두 메서드를 구분할 수 없기 때문이다.아래 소스는 오버로딩의 예제이다.class Overloading{\t//메서드를 만들 대 매개변수의 타입\t//개수에 따라서 이름은 길더라도 실행되는 메서드를 다르게 할 수 있다\t//반환형은 의미 없음 //반환형의 다름의 여부가 다른 메서드로 인식하지 않는다\t\tvoid println(){\t\tSystem.out.println(\"1번\");\t}\tvoid println(int i){\t\tSystem.out.println(\"2번\");\t}\tvoid println(int i, int j){\t\tSystem.out.println(\"3-3번\");\t}// 두 개는 같음 변수명은 관계 없음 타입의 위치가 중요한 것!\tint println(int x, int y){\t\tSystem.out.println(\"3-3번\");\t}\tint println(String i){\t\tSystem.out.println(\"4번\");\t\treturn 0;\t}\t\tpublic static void main(String args[]){\t\tOverloading o = new Overloading();\t\to.println(2,3);\t}}Overloading 클래스에 void println(), void println(int i), void println(int i, int j), int println(int x, int y), int println(String i) 5개의 메서드가 선언되어있다.    위의 예제는 빌드시 에러가 나는데 void println(int i, int j)와 int println(int x, int y) 두 메서드가 오버로딩이 안되기 때문이다.    두 메서드는 return 반환형과 매개변수명이 다르게 정의되어있긴하지만 o.println(2,3); 이란 호출시 어느 메서드로 가야할지 알 수 없기때문이다. (사람도 모른다)오버로딩의 경우 일반적으로 생성자에서 초기화에 많이 사용된다.    대게의 경우, int println(int i, int j, int x, int y, string s) 와같이 필요한 매개변수를 모두 포함하는 메서드를 하나만들어두고 호출시에 필요없는 매개변수는 NULL값을 보내어 처리하도록 하는경우도 많다. o.println(2, 3, NULL, NULL, NULL) 과 같이 사용하는 방법인데 어느것이 더 직관적이고 좋을지는 프로그래머 성향과 판단에 따르면 된다."
    } ,
  
    {
      "title"    : "Java_#7 ABOUT Array",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/java/2021/05/20/java_07.html",
      "date"     : "2021-05-20 00:00:00 +0000",
      "content"  : "Java의 Array배열이란 연관된 데이터를 하나의 변수에 그룹핑해서 관리하기 위한 방법이다.    프로그램을 만들다가 변수를 하나 선언할 때 int a; 이렇게 선언한다고 생각해보면, 두 개를 선언 할 땐 int a, b;, 3개는 int a, b, c;…    그러다 변수 100개, 200개가 필요하다면 아주 수고스러운 일이 생길 수 있다.100개의 변수가 필요하다면 배열을 통해 int i[] = new int[100]; //0번부터 99번까지 100개 한 번에 선언 할 수 있다. 이렇게 선언하면, 변수명[인덱스] 형식으로 i[0] = 10; i[2] = 30; 처럼 각각 변수에 접근하여 사용할 수 있다.문자열 배열 또한 String s[] = new String[100]; 처럼 선언하여 사용 할 수 있고, 각각의 변수에 s[0] = \"aaaa\"; 문자열을 넣어 사용할 수 있다.    (실상 문자열은 내부적으로 배열로 이루어져 있기 때문에 문자열 배열은 실질적으로 2차원 배열로 정의가 되어있다고 생각하면 된다.)int j[] = {1, 2, 3, 4, 5}; 이처럼 배열을 선언하면서 안의 값들을 초기화해 줄 수도 있다. 이러면 j의 배열은 0~4까지의 인덱스를 같는 변수 5개가 만들어지는 셈이다.import java.util.Scanner;class ArraryEx2{\tpublic static void main(String args[]){\t\tScanner s = new Scanner(System.in);\t\t\t\tSystem.out.print(\"배열의 크기를 정해 주세요 : \");\t\tint size = s.nextInt();\t\tint[] data = new int[size]; //data는 배열의 이름\t\t//배열은 변수의 집합 =&gt; 변수에 번호를 붙인다 \t\t//배열의 크기를 new를 이용해 정함\t\t\t\tSystem.out.println(\"만든 배열의 크기는 \" + size + \"입니다\");\t\tSystem.out.println(\"만든 배열의 크기는 \" + data.length + \"입니다\");\t\t//같음\t\t\t\tSystem.out.println(\"숫자를 \" + data.length + \"개 입력해주세요\");\t\tint total = 0;\t\tfor(int i=0; i&lt;data.length; i++){\t\t\tSystem.out.print((i+1)+\"번째 숫자를 입력하세요\");\t\t\tdata[i]=s.nextInt();\t\t\ttotal = total + data[i];\t\t}\t\tSystem.out.println(\"평균은 \" + (total/data.length) + \"입니다\");\t\t\t}}위의 예제는 배열의 크기를 입력받아서 입력받은 크기만큼 배열을 생성하고 평균값을 구하는 프로그램이다.    배열의 경우도 new 연산자로 생성되기 때문에 변수를 만들 때 필요한 메모리가 heap영역에 생성된다. 때문에 컴파일 시에 배열의 크기를 지정해주지 않고 프로그램 동작 중에 값을 입력받아 선언해줄 수 있는 것이다."
    } ,
  
    {
      "title"    : "Java_#6 ABOUT Class",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/java/2021/05/18/java_06.html",
      "date"     : "2021-05-18 00:00:00 +0000",
      "content"  : "Java의 class자바는 객체지향언어로 객체화된 클래스들의 집합으로 구성되어있다    클래스란 비슷한(밀접한) 성질을 가진 변수와 메소드들을 하나의 집합체로만든 개념이라고생각하면된다.클래스를 정의하기위해서는 아래와 같은 형식으로 정의해야한다.class 클래스이름{ \t내용 }일반적으로 클래스와 일반변수를 구분하기위해 클래스의 이름 첫 문자는 대문자로 쓰는데 이러한 관습을 따르는것이 좋다.    내용에는 클래스가 가질 변수와 메소드들을 정의해주면된다.정의된 클래스를 사용하기위해서는 클래스도 자료형의 개념으로 봐야하기 때문에 클래스에대한 객체(변수)를 만들어주어야한다.클래스이름 객체명 = new 클래스이름();위와같은 형식으로 객체를 만들어 사용해주어야한다 new 연산자는 heap 영역에 해당 클래스의 공간을 할당하고 그주소를 반환하는 기능을 한다.아래의 소스는 클래스에 가로와 높이, 넓이의 값을 가지는 클래스를 사용한 예제이다.class Retectangle{\tint width;\tint height;\tint area;}public class Retectangle1{\tpublic static void main(String args[]){\t\tRetectangle myRect = new Retectangle();\t\t\t\tmyRect.width = 10;\t\tmyRect.height = 20;\t\tmyRect.area = (myRect.width*myRect.height);\t\tSystem.out.println(\"면적은 \" + myRect.area);\t}}가로의 길이, 높이, 넓이 이 3개의 변수는 공통적으로 사각형이라는 객체의 성질을 가지기 때문에 하나로 묶어서 사용하는 Retectangle 이라는 클래스를 만들어 사용하였다.    클래스 내부에는 int width, int height, int area 각 3개의 변수만 가지고 있고 이 클래스에접근할수있는 main함수에서 Retectangle myRect = new Retectangle(); 을 통해 이 클래스의 객체를 만들었다.    이제 myRect라는 객체를 이용하 가로, 높이, 넓이를 가지는 클래스 내부변수 3개에 모두 접근할 수 있게된다.    클래스 내부의 변수(멤버변수)에 접근하는 방법은 해당 클래스의 객체명.변수명 으로 접근하면된다.    위의 예제에서는 myRect.area = (myRect.width*myRect.height); 을 통해 넓이값을 직접 계산해 넣어주었지만 사각형의 넓이를 계산하는것 또한 사각형이라는 클래스의 기능으로 만들수 있다.class Retectangle{\tint width;\tint height;\tint area;\tvoid calcArea()\t{\t\tarea = width * height;\t}}public class Retectangle1{\tpublic static void main(String args[]){\t\tRetectangle myRect = new Retectangle();\t\t\t\tmyRect.width = 10;\t\tmyRect.height = 20;\t\tmyRect.calcArea();\t\tSystem.out.println(\"면적은 \" + myRect.area);\t}}위의 예제에서의 차이는 넓이를 구하는 내용조차 클래스 내부에서 처리한다는 점이다. 이로써 우리는 클래스에 높이와 너비만 설정해주게 되면 넓이는 클래스의 메소드를 활용해서 구할 수 있게되는셈이다.이전에 포스팅했던 String또한 클래스이기 때문에 우리는 string의 다양한 내부 메소드를 이용하여 문자열을 더 편하게 조작할 수 있었다.class StringEx3{\tpublic static void main(String args[]){\t\tString str3 = \"Let it be\";\t\tchar a = str3.charAt(2);\t\tSystem.out.jprintln(a);   }}위의 예제를 String 클래스의 내부 메소드인 charAt() 를 사용하며 편리하게 문자열에서 원하는 위치(3번째)의 문자 한개(t)를 얻을수 있다.이처럼 작은기능과 변수들부터 하나의 클래스로 묶어 사용하는것은 객체화된 프로그래밍의 시작이라고 할 수 있다."
    } ,
  
    {
      "title"    : "Java_#5 ABOUT if",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/java/2021/05/15/java_05.html",
      "date"     : "2021-05-15 00:00:00 +0000",
      "content"  : "Java의 if 조건문Java언어는 클래스를 기반으로 객체지향언어라 불리지만 내부적으로는 결국 한줄한줄 실행되고있는 절차지향적 성질도 가질수밖에없다.    메서드 내부에서 프로그램이 동작할때 조건문이 없다면 한방향으로만, 매번 동일한 동작을 수행하는 프로그램만 작성할수 없을 것이다.    프로그램은 다양한 변수와 상황에따라 여러 동작을 수행할수 있어야하고 이를위해 조건문을 사용해야한다.if문은 기본적으로 아래의 형태를 가진다if(조건식){\t내용1}조건식 안의 식을 보고 식이 참이면 내부의 내용1이 실행되고 거짓일경우 내부를 실행하지않고 넘어간다if(조건식){\t내용1}else{\t내용2}조건식 안의 식을 보고 식이 참이면 if문 내부의 내용1이 실행되고 거짓일경우 else 내부의 내용2를 실행한다if(조건식1){\t내용1}else if(조건식2){\t내용2}else{\t내용3}처음 조건식1을 보고 식이 참이면 if문 내부의 내용1이 실행되고 거짓일경우 else if의 조건식2를보고 참이면 내용2를 실행, 조건식2도 거짓일 경우 else 내부의 내용3를 실행한다아래의 예제는 점수를 입력받아 학점을 A~F까지 출력하는 예제이다import java.util.Scanner;public class Y2 {\tpublic static void main(String args[]){\t\tScanner sc = new Scanner(System.in);\t\t\t\tint a;\t\t\t\tSystem.out.print(\"점수 : \");\t\ta = sc.nextInt();\t\t\t\tif(a &gt;= 90){\t\t\tSystem.out.println(\"A\");\t\t}else if(a &gt;= 80){\t\t\tSystem.out.println(\"B\");\t\t}else if(a &gt;= 70){\t\t\tSystem.out.println(\"C\");\t\t}else if(a &gt;= 60){\t\t\tSystem.out.println(\"D\");\t\t}else if(a &gt;= 50){\t\t\tSystem.out.println(\"F\");\t\t}\t\t\t}}int a 변수에 점수를 입력받은 후 그 점수에 따라서 성적이 A~F중 하나가 출력이된다.    첫번째 조건문에서 a가 90보다 같거나 큰지를 확인하게되고 조건이 참이라면 A를 출력하고, 그렇지않으면 다음조건문 a&gt;=80, a&gt;=70 … 순차적으로 계속비교해나가게 된다"
    } ,
  
    {
      "title"    : "Java_#4 ABOUT Method",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/java/2021/05/09/java_04.html",
      "date"     : "2021-05-09 00:00:00 +0000",
      "content"  : "Java의 메소드코딩을 하면서 자주, 반복적으로 사용하거나 특별한 기능을 하는부분을 함수(메소드)단위로 쪼개어 분리시킬 수 있다. 아래 코드는 한 면의 넓이를 입력받아서 넓이를 출력하는 프로그램이다.import java.util.Scanner;public class T8_5 { //정육면체의 겉넓이\tpublic static void main(String args[]){\t\tScanner sc = new Scanner(System.in);\t\t\t\tint a; //한 면의 넓이\t\tint b; //정육면체의 겉넓이\t\t\t\tSystem.out.print(\"한 면의 넓이 : \");\t\ta = sc.nextInt();\t\t\t\tb = a * 6;\t\tSystem.out.print(\"정육면체의 겉넓이 : \" + b);\t}}main도 하나의 함수이지만 저런 기능들을 또 메서드를 분리시켜놓음으로서 소스의 재활용이 용이해질수있다.아래 코드는 위의 코드에서 겉넓이를 계산하는 부분을 func라는 메서드로 분리하여 동작하는내용이다.import java.util.Scanner;public class T8_5 { //정육면체의 겉넓이\tpublic int func(int area)\t{\t\treturn area * 6;\t}\tpublic static void main(String args[]){\t\tScanner sc = new Scanner(System.in);\t\t\t\tint a; //한 면의 넓이\t\tint b; //정육면체의 겉넓이\t\t\t\tSystem.out.print(\"한 면의 넓이 : \");\t\ta = sc.nextInt();\t\tb = func(a);\t\t\t\tSystem.out.print(\"정육면체의 겉넓이 : \" + b);\t}}한면의 넓이를 입력받은 a의 변수는 지역변수이기때문에 func 메서드에서 사용하기위해선 메개변수로 넘겨주어야한다.    메개변수를 area 로받은 func 메서드 내부에서 겉넓이를 구하는 공식은 6을 곱하여 값을 다시 main함수로 보내주기위해 return을 사용한다.    메개변수와 return문을 이용하여 메서드간에 데이터를 주고받으며 프로그램을 동작시킬 수 있다."
    } ,
  
    {
      "title"    : "Java_#3 ABOUT  For",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/java/2021/05/03/java_03.html",
      "date"     : "2021-05-03 00:00:00 +0000",
      "content"  : "For문에 대해서-for(초기값;조건식;증감식) public class ForEx1 {\tpublic static void main(String args[]){\t\tfor (int i = 1; i &lt; 5; i++){\t\t\tSystem.out.println(\"i의 값은 : \" + i);\t\t}\t}}위의 for문을 해석해보자면, for (i가 0이고; i가 5보다 작으면; i값을 증가시켜라) 는 의미이다. println으로 i의 값을 출력시켰으므로, 결과는 1 2 3 4가 될 것이다. public class ForEx2 {\tpublic static void main(String args[]){\t\tint sum = 0; // 전체 합\t\tint odd = 0; // 홀수의 합\t\tint even = 0; // 짝수의 합\t\t\t\tfor (int i = 1; i &lt;= 100; i++){\t\t\tsum += i;\t\t\tif(i%2 == 0){ // i를 2로 나눴을 때의 나머지가 0과 같다면\t\t\t\teven += i;\t\t\t}else{\t\t\t\todd += i;\t\t\t}\t\t}\t\t\tSystem.out.println(\"1부터 100까지의 합 : \" + sum);\tSystem.out.println(\"1부터 100까지의 홀수의 합 : \" + odd);\tSystem.out.println(\"1부터 100까지의 짝수의 합 : \" + even);\t}}for문을 사용하여 특정 수까지의 모든 합을 구하기 위해서는 변수를 하나 만들어둬야 하고, 필요에 따라 if문을 사용하여 조건을 맞춰주면 된다. \t\t\t\t\t\t\t\t\t   -For문으로 구구단 출력하기 import java.util.Scanner;class Gugu2{\tpublic static void main(String args[]){\t\tScanner sc = new Scanner(System.in);\t\t\t\tint n;\t\tSystem.out.print(\"숫자를 입력하세요 : \");\t\tn = sc.nextInt();\t\t\t\tfor(int i = 1; i &lt;= 9; i++){\t\t\tSystem.out.println(n+\"*\"+i+\"=\"+(n*i));\t\t}\t}}구구단에서 원하는 단의 숫자를 입력하면, int i는 1이고, i가 9 이하까지 i를 증가시키는 for문을 통해서 구구단 출력이 가능하다. 추가적으로, 숫자를 입력 받아야 한다면 Scanner를 import 해야하고, new를 통해 Scanner 객체를 생성해주고, 입력 받아야 하는 변수를 하나 정해준 다음, int형을 입력받을 시에는 nextInt() 메서드를 사용해야 한다. "
    } ,
  
    {
      "title"    : "Java_#2 ABOUT String",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/java/2021/04/25/java_02.html",
      "date"     : "2021-04-25 00:00:00 +0000",
      "content"  : "Java의 문자열String = 클래스 = 클래스의 변수 (레퍼런스형 변수 = 참조형 변수)참조형 변수는 실제 주소값을 갖고 있고, 주소값을 따라가면 실제 값으로 연결String str1 = “aaa”;보통의 언어에서 대부분 문자열을 쓰는 경우가 많으므로 예외를 만들어 변수로 둔 것, 기초형처럼 사용 가능String str2 = new String(“bbb”); 위와 같은 의미로 정식으로 사용하는 방법이지만, 줄여서 위처럼 사용 가능class StringEx1{  public static void main(String args[]){      String str1 = \"aaa\";    String str2 = new String(\"bbb\");        System.out.println(str1 == str2); // false        System.out.println(str1.equals(str2)); //true    // equals = 문자 비교 시 사용 = 주소를 따라가서 가져온 값을 비교       }}문자의 길이, 위치 등을 가져오는 함수String 타입의 변수에는 String이 클래스이기 때문에 내부적으로 아래와 같은 많은 메서드들을 들고 있다.  length() = 글자의 길이를 가져오는 메서드class StringEx2{  public static void main(String args[]){    int str_length = str1.length();    System.out.println(str_length);   }}  charAt() = 특정 위치의 글자를 가져오는 메서드  charAt(int idx) = int형 변수 idx에 숫자를 넣으면 해당 문자열의 순서에 따라 숫자에 해당하는 문자열의 문자를 갖고 온다.class StringEx3{  public static void main(String args[]){      String str3 = \"Let it be\";    char a = str3.charAt(2); // 항상 0부터 시작    // str3의 문자열에서 2에 해당하는 문자는 t    // L(0), e(1), t(2)    System.out.jprintln(a);   }}  indexOf() = 특정 글자의 위치를 가져오는 메서드class StringEx4{  public static void main(String args[]){    String str4 = \"안녕하세요 반가워요\";     System.out.println(str4.indexOf(\"하\");   }}  substring() = 글자를 잘라내는 메서드"
    } ,
  
    {
      "title"    : "Java_#1 ABOUT Java Installation",
      "category" : "",
      "tags"     : "",
      "url"      : "https://kwonyezy.github.io/java/2021/04/19/java_01.html",
      "date"     : "2021-04-19 00:00:00 +0000",
      "content"  : "Java 설치 및 환경변수 설정JDK(Java Development Kit)를 사용하면 Java 프로그램을 실행하고 코딩할 수 있다. PC에 여러 버전의 JDK를 설치할 수 있지만, 최신 버전의 Java를 설치하는 것이 좋다. 그러나… 쓰던 java8을 설치하는 법을 포스팅한다.Windows용 Java를 설치하는 방법  링크로 이동하여 하단의 Java8 탭 -&gt; Windows -&gt; x64 Installer를 클릭하여 윈도우용 JDK 8를 다운로드를 진행한다.  설치 링크를 클릭하면 팝업이 열린다. I reviewed and accept the Oracle Technology Network License Agreement for Oracle Java SE 항목에 체크를 한 뒤 다운로드를 누른다  Java 8 파일 다운로드를 시작하려면 Oracle 계정을 생성하고 로그인해야 한다.  Java JDK 8 다운로드가 완료되면 exe를 실행하여 JDK를 설치합니다. Next를 클릭하여 설치를 진행하여 완료한다.환경 변수를 설정하는 방법PATH 변수는 javac, java 등과 같은 실행 파일의 위치를 ​​윈도우에 알려주기 위함이다.    PATH를 지정하지 않고도 프로그램을 실행할 수 있지만, C:\\Program Files\\Java\\jdk1.8.0_271\\bin 과 같은 실행 파일의 전체 경로를 매번 써야 하므로 불편함이 따른다.CLASSPATH 변수는 라이브러리 파일의 위치를 ​​제공하기 위해 설정해주어야 한다.PATH 및 CLASSPATH를 설정하기  내 PC 아이콘을 마우스 오른쪽 버튼으로 클릭하고 속성을 선택하고 고급 시스템 설정을 클릭한다.  시스템 속성 창에서 환경 변수를 클릭한다.  사용자 변수의 새로 만들기를 누른 뒤 오른쪽 그림같이 경로를 설정해준다. 경로의 이름은 설치되는 버전을 따른다.  시스템 변수에도 JAVA_HOME 이라는 변수를 만들고 설치된 jdk의 경로를 입력해준다.    Path를 더블클릭하여 오른쪽 그림처럼 %JAVA_HOME%을 추가해준다.  cmd 창을 열어 javac 를 입력했을 때 아래와 같이 뜬다면 잘 설정된 것이다."
    } 
  
  ,
  
   {
     
        "title"    : "Markdown from A to Z",
        "category" : "",
        "tags"     : "user manual, markdown, writing format",
        "url"      : "https://kwonyezy.github.io/markdown%20guide.html",
        "date"     : "2023-09-05 00:00:00 +0000",
        "content"  : ""
     
   } ,
  
   {
     
        "title"    : "Example Post: no thumbnail image",
        "category" : "",
        "tags"     : "",
        "url"      : "https://kwonyezy.github.io/Category%20A/Subcategory%20a/post-01.html",
        "date"     : "2023-12-01 00:00:00 +0000",
        "content"  : ""
     
   } ,
  
   {
     
        "title"    : "Example Post: thumbnail exists",
        "category" : "",
        "tags"     : "",
        "url"      : "https://kwonyezy.github.io/Category%20A/Subcategory%20a/post-02.html",
        "date"     : "2023-12-02 00:00:00 +0000",
        "content"  : ""
     
   } ,
  
   {
     
        "title"    : "My personal Online Library",
        "category" : "",
        "tags"     : "book, education",
        "url"      : "https://kwonyezy.github.io/Category%20B/Subcategory%20b/post-03.html",
        "date"     : "2023-12-03 00:00:00 +0000",
        "content"  : ""
     
   } ,
  
   {
     
        "title"    : "Classic Literature #1: Romeo and Juliet",
        "category" : "",
        "tags"     : "book, epic novel, romance",
        "url"      : "https://kwonyezy.github.io/Category%20B/Subcategory%20b/Subsubcategory%201/post-04.html",
        "date"     : "2023-12-04 00:00:00 +0000",
        "content"  : ""
     
   } ,
  
   {
     
        "title"    : "Classic Literature #2: Don Quixote",
        "category" : "",
        "tags"     : "book, epic novel, adventure",
        "url"      : "https://kwonyezy.github.io/Category%20B/Subcategory%20b/Subsubcategory%202/post-05.html",
        "date"     : "2023-12-05 00:00:00 +0000",
        "content"  : ""
     
   } ,
  
   {
     
        "title"    : "Activate Goat Counter to know how many users visit your blog or posts",
        "category" : "",
        "tags"     : "user manual, utility, goatcounter",
        "url"      : "https://kwonyezy.github.io/visitor%20counter.html",
        "date"     : "2024-02-02 00:00:00 +0000",
        "content"  : ""
     
   } ,
  
   {
     
        "title"    : "Manage blog comments with Giscus",
        "category" : "",
        "tags"     : "user manual, utility, giscus",
        "url"      : "https://kwonyezy.github.io/comment%20system.html",
        "date"     : "2024-02-03 00:00:00 +0000",
        "content"  : ""
     
   } ,
  
   {
     
        "title"    : "Publishing your blog post",
        "category" : "",
        "tags"     : "user manual, writing format",
        "url"      : "https://kwonyezy.github.io/posting%20guide.html",
        "date"     : "2024-02-04 00:00:00 +0000",
        "content"  : ""
     
   } ,
  
   {
     
        "title"    : "Index",
        "category" : "",
        "tags"     : "",
        "url"      : "https://kwonyezy.github.io/Category%20A/Subcategory%20a/index.html",
        "date"     : "2024-06-07 00:00:00 +0000",
        "content"  : ""
     
   } ,
  
   {
     
        "title"    : "Index",
        "category" : "",
        "tags"     : "",
        "url"      : "https://kwonyezy.github.io/Category%20A/index.html",
        "date"     : "2024-06-07 00:00:00 +0000",
        "content"  : ""
     
   } ,
  
   {
     
        "title"    : "Index",
        "category" : "",
        "tags"     : "",
        "url"      : "https://kwonyezy.github.io/Category%20B/Subcategory%20b/Subsubcategory%201/index.html",
        "date"     : "2024-06-07 00:00:00 +0000",
        "content"  : ""
     
   } ,
  
   {
     
        "title"    : "Index",
        "category" : "",
        "tags"     : "",
        "url"      : "https://kwonyezy.github.io/Category%20B/Subcategory%20b/Subsubcategory%202/index.html",
        "date"     : "2024-06-07 00:00:00 +0000",
        "content"  : ""
     
   } ,
  
   {
     
        "title"    : "Index",
        "category" : "",
        "tags"     : "",
        "url"      : "https://kwonyezy.github.io/Category%20B/Subcategory%20b/index.html",
        "date"     : "2024-06-07 00:00:00 +0000",
        "content"  : ""
     
   } ,
  
   {
     
        "title"    : "Index",
        "category" : "",
        "tags"     : "",
        "url"      : "https://kwonyezy.github.io/Category%20B/Subcategory%20c/index.html",
        "date"     : "2024-06-07 00:00:00 +0000",
        "content"  : ""
     
   } ,
  
   {
     
        "title"    : "Index",
        "category" : "",
        "tags"     : "",
        "url"      : "https://kwonyezy.github.io/Category%20B/index.html",
        "date"     : "2024-06-07 00:00:00 +0000",
        "content"  : ""
     
   } ,
  
   {
     
        "title"    : "Index",
        "category" : "",
        "tags"     : "",
        "url"      : "https://kwonyezy.github.io/index.html",
        "date"     : "2024-06-07 00:00:00 +0000",
        "content"  : ""
     
   } ,
  
   {
     
        "title"    : "Example Post",
        "category" : "",
        "tags"     : "introduce, self-introduction, portfolio",
        "url"      : "https://kwonyezy.github.io/Category%20B/Subcategory%20b/post-06.html",
        "date"     : "2024-06-10 00:00:00 +0000",
        "content"  : ""
     
   } ,
  
   {
     
        "title"    : "Portfolio",
        "category" : "",
        "tags"     : "introduce, self-introduction, portfolio",
        "url"      : "https://kwonyezy.github.io/My%20Info/Portfolio.html",
        "date"     : "2024-06-11 00:00:00 +0000",
        "content"  : ""
     
   } 
  
]

